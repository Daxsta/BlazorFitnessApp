@page "/calories"


<div id="page">

    <div class="card">
        <div class="card-body">


            <div id="maintenance-calculator">

                <div class="flex-container">
                    <label for="Height">Height</label>
                    <input type="number" id="Height" placeholder="Height" @bind-value="height" min="1" max="299" step="1"/>
                </div>
                <div class="flex-container">
                    <label for="Weight">Weight</label>
                    <input type="number" id="Weight" placeholder="Weight" @bind-value="weight" min="1" max="300" step="0.5"/>
                </div>
                <div class="flex-container">
                    <label for="Age">Age</label>
                    <input type="number" id="Age" placeholder="Age" @bind-value="age" min="1" max="199" step="1"/>
                </div>
                <div class="flex-container">
                    <label for="Gender">Gender</label>
                    <select @bind="gender" id="Gender">
                        <option value="m">Male</option>
                        <option value="f">Female</option>
                    </select>
                </div>

                <p id="message" style="color:@messageColor">@message</p>

                <div class="flex-container">
                    <label for="Result">Result</label>
                    <input type="text" readonly id="Result" value="@maintenanceResult" />
                </div>

                <div class="flex-container">
                    <button @onclick="() => OnCalculateMaintenanceClick()">Result</button>
                </div>

            </div>

            <div id="pal-calculator">

                @for(int i = 0; i < Excercises.Count; i++)
                {
                <div class="flex-container">
                    <label>Excercise</label>
                    <select @bind="Excercises[i].PAL">
                        <option value="4">Cycling 12km/h</option>
                        <option value="6">Cycling 16km/h</option>
                        <option value="8">Cycling 20km/h</option>
                        <option value="10">Cycling 24km/h</option>
                        <option value="12">Cycling 28km/h</option>
                        <option value="6">Swimming-slow</option>
                        <option value="8">Swimming-medium</option>
                        <option value="10">Swimming-fast</option>
                        <option value="3">Walking, Nordic Walking 4km/h</option>
                        <option value="3.8">Walking, Nordic Walking 5.5km/h</option>
                        <option value="6.3">Walking, Nordic Walking 7km/h</option>
                        <option value="8">Walking, Nordic Walking 8km/h</option>
                        <option value="6">Jogging 6km/h</option>
                        <option value="8.3">Jogging 8km/h</option>
                        <option value="10">Jogging 10km/h</option>
                        <option value="11.8">Jogging 12km/h</option>
                        <option value="13.5">Jogging 14km/h</option>
                        <option value="6.5">Aerobics, Gymnastic</option>
                        <option value="7.5">Strength Training</option>
                        <option value="7">Tennis, Badminton, Squash</option>
                        <option value="7.5">Team Sports(Football, Soccer, Basketball...)</option>
                        <option value="8">Martial Arts</option>
                        <option value="8">Winter Sports</option>
                        <option value="3">Other - very low intensity</option>
                        <option value="4.5">Other - low intensity</option>
                        <option value="6">Other - medium intensity</option>
                        <option value="7.5">Other - high intensity</option>
                        <option value="9">Other - very high intensity</option>
                    </select>
                    <label>Hours</label>
                    <input type="number" @bind="Excercises[i].Time" min="0" max="24" step="0.5" />
                </div>
                }


                <div class="flex-container">
                    <button disabled="@palButtonDisabled">PAL</button>
                    <em><p style="color:@green">@(palButtonDisabled ? "Calculate Maintenance First!" : "")</p></em>
                </div>



            </div>

        </div>
    </div>





</div>



@code {

    private const string green = "#1c7c00";
    private const string red = "#ff0000";

    private int weight { get; set; }
    private int height { get; set; }
    private int age { get; set; }
    private string gender = "m";

    private string maintenanceResult = "";
    private bool palButtonDisabled => maintenanceResult == "" || maintenanceResult == "NaN";

    private string message = "";
    private string messageColor = "";

    List<Excercise> Excercises = new List<Excercise>();


    protected override async Task OnInitializedAsync()
    {
        Excercises.Add(new Excercise());
    }

    private async Task OnCalculateMaintenanceClick()
    {
        if (weight > 0 && height > 0 && age > 0)
        {

            messageColor = green;
            message = "";

            switch (gender)
            {
                case "m":
                    maintenanceResult = Math.Round((9.99 * weight) + (6.25 * height) - (4.92 * age) + 5).ToString();
                    break;

                case "f":
                    maintenanceResult = Math.Round((9.99 * weight) + (6.25 * height) - (4.92 * age) - 161).ToString();
                    break;

                default:
                    break;
            }
        }
        else
        {
            messageColor = red;
            message = "Invalid Inputs detected";
            maintenanceResult = "NaN";
        }
    }

}
